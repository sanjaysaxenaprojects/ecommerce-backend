What is the use of @Data annotation?

The `@Data` annotation is a powerful feature provided by the Lombok library in Java. Let me break it down for you:

1. What Does It Do?
   - The `@Data` annotation generates boilerplate code for you, making your Java classes more concise and readable.
   - It bundles several commonly used features together, including:
     - Getters and Setters: Automatically generates getter and setter methods for all fields in your class.
     - `toString()`, `equals()`, and `hashCode()`: Provides default implementations for these methods based on the fields of your class.
     - Constructor: Creates a constructor that initializes all final fields and non-final fields marked with `@NonNull`.
   - Essentially, it saves you from writing repetitive code for simple Plain Old Java Objects (POJOs) and beansÂ¹Â².

2. How to Use It?
   - Apply the `@Data` annotation to your class, and Lombok will take care of the rest.
   - For example:
     
     import lombok.Data;

     @Data
     public class Person {
         private String name;
         private int age;
     }
     
     This automatically generates the getter and setter methods, `toString()`, `equals()`, `hashCode()`, and a constructor for the `Person` class.

3. Customization:
   - If you need to set non-default values for any of the features (e.g., exclude fields from `equals()` or customize the `toString()` format), you can still add those annotations explicitly alongside `@Data`.
   - All generated getters and setters are public, but you can override the access level by annotating the field or class with explicit `@Setter` and/or `@Getter`.
   - You can also suppress generating a getter and/or setter altogether by combining `@Data` with `@Setter(AccessLevel.NONE)` or `@Getter(AccessLevel.NONE)`Â¹.

In summary, `@Data` simplifies your code by handling common boilerplate tasks, allowing you to focus on the essential parts of your Java classes. ðŸš€Â¹Â²Â³

Source: Conversation with Copilot, 5/31/2024
(1) @Data - Project Lombok. https://projectlombok.org/features/Data.
(2) Lombok @Data | Streamlining Plain Old Java Objects. https://ioflood.com/blog/lombok-data/.
(3) Introduction to Lombok Data Annotation | devwithus.com. https://devwithus.com/lombok-data-annotation/.

Why we don't need @Repository annotation in repository interface?